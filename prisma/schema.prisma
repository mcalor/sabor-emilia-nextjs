
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}


datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          String?   @default("user")
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  slug        String    @unique
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]
}

model Product {
  id           String      @id @default(cuid())
  name         String
  description  String?
  price        Int // precio en CLP centavos
  categoryId   String
  imageUrl     String?
  available    Boolean     @default(true)
  stock        Int?        @default(999)
  slug         String      @unique
  featured     Boolean     @default(false)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  category     Category    @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  orderItems   OrderItem[]
}

model Order {
  id               String      @id @default(cuid())
  orderNumber      String      @unique
  customerEmail    String
  customerName     String
  customerPhone    String?
  shippingAddress  String?
  shippingCommune  String?
  subtotal         Int // en CLP centavos
  shippingCost     Int // en CLP centavos
  total            Int // en CLP centavos
  status           OrderStatus @default(PENDING)
  paymentStatus    PaymentStatus @default(PENDING)
  mercadoPagoId    String?
  mercadoPagoStatus String?
  notes            String?
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  items            OrderItem[]
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  unitPrice Int // precio unitario en CLP centavos
  total     Int // precio total en CLP centavos
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id])
}

model Configuration {
  id           String   @id @default(cuid())
  key          String   @unique
  value        String
  description  String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Contact {
  id        String   @id @default(cuid())
  name      String
  email     String
  phone     String?
  message   String
  status    ContactStatus @default(NEW)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PREPARING
  READY
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum ContactStatus {
  NEW
  REPLIED
  CLOSED
}
